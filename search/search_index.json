{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The secure open platform enables you to build interoperable apps for health and social care. Our platform provides the plumbing and takes care of much of the \"heavy lifting\" allowing you to concentrate your efforts on application functionality while the platform deals with issues including interoperability, cyber-security, information governance and business continuity. Unlike many other platforms which are based on proprietary approaches which mean your application is locked-in to the platform we use established open standards including openEHR, IHE-XDS, FHIR and SMART which means you applications are easily transportable to other platforms based on these standards. To find out more about the rationale and concepts behind the open platform approach, you may want to look this video. Create an Account Your first step to using the platform is to create an account - just click here . Build a Project The building blocks of the platform are called a Project. A Project provides a container for a set of services from the platform that you need for a particular application to use the platform you need at least one Project, although you can create as many as you need. Explore the API All interaction with the platform is through a set of REST APIs that are provisioned for you when you create a Project. The easiest way to understand how these APIs work and the services they provide is to read the documentation and explore the APIs using Postman which provides a test harness allowing you to experiment with the APIs available in your Operinos. Connect you First Application Once you understand the basics you will be ready to connect your first application to the platform. You can build applications to run on the platform using virtually any web development language of your choice.","title":"What can I do with the platform?"},{"location":"#introduction","text":"The secure open platform enables you to build interoperable apps for health and social care. Our platform provides the plumbing and takes care of much of the \"heavy lifting\" allowing you to concentrate your efforts on application functionality while the platform deals with issues including interoperability, cyber-security, information governance and business continuity. Unlike many other platforms which are based on proprietary approaches which mean your application is locked-in to the platform we use established open standards including openEHR, IHE-XDS, FHIR and SMART which means you applications are easily transportable to other platforms based on these standards. To find out more about the rationale and concepts behind the open platform approach, you may want to look this video.","title":"Introduction"},{"location":"#create-an-account","text":"Your first step to using the platform is to create an account - just click here .","title":"Create an Account"},{"location":"#build-a-project","text":"The building blocks of the platform are called a Project. A Project provides a container for a set of services from the platform that you need for a particular application to use the platform you need at least one Project, although you can create as many as you need.","title":"Build a Project"},{"location":"#explore-the-api","text":"All interaction with the platform is through a set of REST APIs that are provisioned for you when you create a Project. The easiest way to understand how these APIs work and the services they provide is to read the documentation and explore the APIs using Postman which provides a test harness allowing you to experiment with the APIs available in your Operinos.","title":"Explore the API"},{"location":"#connect-you-first-application","text":"Once you understand the basics you will be ready to connect your first application to the platform. You can build applications to run on the platform using virtually any web development language of your choice.","title":"Connect you First Application"},{"location":"404/","text":"Sorry, but the page you were trying to view does not exist. Try searching for it or looking at the URL to see if it looks correct.","title":"\"Page Not Found\""},{"location":"Clinical Content/CC0-CKM-overview/","text":"section provides an overview of Clinical Knowledge Manager. --- Clinical Knowledge Manager (CKM) is a commercial online tool for managing openEHR artefacts such as archetypes and templates. All CKM content is open source and freely available under Creative Commons licensing rules. More information about Clinical Knowledge Manager is available at this link","title":"\"CKM overview\" permalink: CC0-CKM-overview.html summary: This"},{"location":"Clinical Content/CC1-CKM-signup/","text":"provides guidance on how to sign up to Clinical Knowledge Manager. --- Access Clinical Knowledge Manager via the appropriate link. The International Clinical Knowledge Manager can be accessed via International CKM , the Apperta Clinical Knowledge Manager is at this link Apperta CKM . Click the Sign up button in the top right hand corner to display the Sign up screen Fill in the required details and confirm that you want to sign up by clicking the Sign up button at the bottom. The confirmation screen will be displayed, including a message that you need to activate your account. Find the activation email in your email client and select to activate your account from inside the email. This will re-open Clinical Knowledge Manager and confirm that your account is now activated. Sign into Clinical Knowledge Manager using either your user name (in the format firstname.surname) or the email address you provided when you signed up. You will be prompted whether you want to become a reviewer. Click Yes to confirm that you want to become a reviewer and select the appropriate Professional areas. You can become a reviewer without selecting any professional area, but you are less likely to receive invitations to review archetypes or templates relevant to your professional experience. PLEASE NOTE that there is no obligation on your part to ever participate in any reviews. You can decide for each invitation whether to participate immediately, later or not at all.","title":"\"CKM signup\" permalink: CC1-CKM-signup.html summary: This section"},{"location":"Clinical Content/CC2-CKM-template-review/","text":"template in Clinical Knowledge Manager. --- General Information One of the key points to be aware of at this stage is that you will be reviewing a dataset rather than finished data entry form or report. The dataset is represented in such a way that it looks like a form, but the user interface for an actual form or the format of an actual report based on this dataset may look quite different. So, what does that mean for you as a reviewer? The order in which individual data items are displayed may not feel right. This can be due to the way in which the underlying dataset artefacts are structured, and the order can be changed later in the user interface. There will be some additional information such as descriptions of data points or seemingly redundant headings which again are part of the underlying artefacts and may not be required in the final user interface. They are, however, helpful to understand the structure of the dataset and the meaning of the individual data points. The way the dataset will be used in a user interface means that some of the sections will only be displayed depending on certain conditions, e.g. if the patient is a professional athlete, more information may be required. The dataset you are reviewing includes all the possible data points, but much of it is either optional or conditional upon the circumstances. The invitation email you received contains some information about the project itself, and some suggestions of what you should be looking out for. In general, we would like reviewers to keep the following in mind when doing a review: Is the clinical content correct? Is anything missing? Is any of the content superfluous? Does the content match current practice / pathways you use? Are the names of the individual data points meaningful? And obviously, we\u2019ll be grateful if you point out any spelling mistakes or grammar issues. Don\u2019t write things like \u2018Yes\u2019, \u2018Ok\u2019 or \u2018Agree\u2019 or \u2018I like it\u2019 in the comments when you do your review. Much as we like it when you agree with what we have done, someone has to read and action all the comments once the review round is completed, and these sorts of comments just waste time. If we don\u2019t see any comments against a particular item, we assume it\u2019s ok. The exception to this rule is if we ask a Special Question. For these any answer will be appreciated. You can add as many or as few comments as you like. All comments are entirely optional, and there is only one bit we need you to complete before you submit your review, and that is at the very end of the process when we ask you for your overall recommendation. I\u2019ll say a bit more about this at the end of this document. Invitation You will have received an email invitation to review a template. In the body of the email there will be four choices: If you are ready to review the template you should select \u2018Accept and review template now\u2019 . This will take you to the relevant page for this review in Clinical Knowledge Manager (see Section 4). If you want to be involved in the review but you don\u2019t have time right now, you can select \u2018Accept and review template later\u2019 . You will receive a reminder shortly before the review period expires. You can also review the template at any time by simply logging onto Clinical Knowledge Manager and using the dashboard to find the review (see Section 5). If you don\u2019t want to be involved in this review round, you can select \u2018Decline this invitation\u2019 . You may get another invitation later if there is another review round for the same template. If you don\u2019t want to review this template at all, you can select \u2018Decline all invitations for this template\u2019 . You may get an invitation in the future to participate in a review for another template or archetype. Review template now Overview When you have chosen to perform the review now from your invitation email, you will be presented with the Clinical Knowledge Manager login screen. Enter your login name and password. Your login name is usually in the format firstname.surname and was allocated when you first signed up to Clinical Knowledge Manager. Once you have signed in, the Invitation tab of the template review screen will be displayed: You now have several choices: Display a simple view of the template to get an overview of the content. Move to next tab to start reviewing the template. Use the tabs at the top to navigate through the different parts of the review. The buttons at the bottom are available at any time during the review process and can be used to save and continue , save and close or save and submit the review . Note that the last one should only be used when you have completed the review. It is advisable to save and continue at regular intervals. Simple view Before you start the review process it may be useful to switch to the simple view of the template (see (1) in the screenshot above), just to see a more compact view of the content. This will be displayed in a separate tab (see (1) in the screenshot below) to allow you to toggle back and forth between the simple view and the review screen. As well as looking at the simple view itself, you can also switch to a printable view (2) or a mindmap view (3). Either of these may be helpful to understand and visualise the content of the template. Starting the review To start the review, just toggle back to the review screen and click on Next at the bottom of the screen or select the Header tab. The Header tab The Header tab displays the template name and the purpose of the template. You can add comments on both by simply typing into the box entitled \u2018Your Comment\u2019. When you have finished with your comments or if you have no comments on the Header, click on Next or select the Data tab to move to the main body of the template. Below are a couple of examples of typical comments made on the Header details in other template reviews: The Data tab The Data tab displays the main body of the template. This part is quite long, so here are some useful hints: The body of the template has four columns: The name of the data point (e.g. Location, Date injury occurred, Pattern ). The description of the data point (e.g. The date on which the injury occurred or Narrative description about the pattern of the symptom or sign during this episode ). Details of picklist values, units of measure, minimum/maximum values, default values. This column is often empty where no constraints have been applied. The Comments box where you can add your comments, suggestions or questions. Some of the lines just reflect the underlying structure and do not actually contain any clinical data as such. Examples of these are: As a rule there is no need to comment on these, unless you feel that the name is misleading or problematic in any way. These structural lines are coloured differently and have a black triangle icon which you allows you to hide the details underneath once you have finished commenting on it. You can unhide the details by clicking the white triangle icon next to a closed section. Closing each part with the black triangle icon once you finish reviewing that part may be helpful as you go through the review. You can always reopen it with the white triangle icon . You don\u2019t have to complete the review in one go. The Save and close icon allows you to save what you\u2019ve done so far and come back to it later by logging back into Clinical Knowledge Manager and selecting the review through the Dashboard (see Section 5). Below are some examples of typical comments on other template reviews: When you have reviewed the whole body of the template and added your comments, questions or suggestions, click on Next or select the Overall comments tab to move to the final step of the review. You can also interrupt your review and come back to it at any time by using the Save and close option at the bottom of the view. The Overall Comments tab The final part of the review allows you to make some more general comments about the template and complete the overall recommendation. As with the previous section, comments are optional, and you don\u2019t have to add anything. Below are some examples of overall comments made in other template reviews: The Overall Recommendation is mandatory, and this is the only part you must complete if you want to submit your review. You must select one of these options: Accept Minor revision Major revision Reject Abstain The screenshot below explains how these options are intended to be used. You can also display this information by clicking on the information icon next to the Overall Recommendation field. The Dashboard If you want to go back to your review later or you have selected to accept a review but complete it later, you can log into the Clinical Knowledge Manager ( http://www.clinicalmodels.org.uk/ckm/ ) and select the Dashboard tab. By default, the top left hand quadrant displays any outstanding reviews. Click on the line displaying your review and select Start your review now.","title":"\"CKM template review\" permalink: CC2-CKM-template-review.html"},{"location":"Clinical Content/CC2-CKM-template-review/#general-information","text":"One of the key points to be aware of at this stage is that you will be reviewing a dataset rather than finished data entry form or report. The dataset is represented in such a way that it looks like a form, but the user interface for an actual form or the format of an actual report based on this dataset may look quite different. So, what does that mean for you as a reviewer? The order in which individual data items are displayed may not feel right. This can be due to the way in which the underlying dataset artefacts are structured, and the order can be changed later in the user interface. There will be some additional information such as descriptions of data points or seemingly redundant headings which again are part of the underlying artefacts and may not be required in the final user interface. They are, however, helpful to understand the structure of the dataset and the meaning of the individual data points. The way the dataset will be used in a user interface means that some of the sections will only be displayed depending on certain conditions, e.g. if the patient is a professional athlete, more information may be required. The dataset you are reviewing includes all the possible data points, but much of it is either optional or conditional upon the circumstances. The invitation email you received contains some information about the project itself, and some suggestions of what you should be looking out for. In general, we would like reviewers to keep the following in mind when doing a review: Is the clinical content correct? Is anything missing? Is any of the content superfluous? Does the content match current practice / pathways you use? Are the names of the individual data points meaningful? And obviously, we\u2019ll be grateful if you point out any spelling mistakes or grammar issues. Don\u2019t write things like \u2018Yes\u2019, \u2018Ok\u2019 or \u2018Agree\u2019 or \u2018I like it\u2019 in the comments when you do your review. Much as we like it when you agree with what we have done, someone has to read and action all the comments once the review round is completed, and these sorts of comments just waste time. If we don\u2019t see any comments against a particular item, we assume it\u2019s ok. The exception to this rule is if we ask a Special Question. For these any answer will be appreciated. You can add as many or as few comments as you like. All comments are entirely optional, and there is only one bit we need you to complete before you submit your review, and that is at the very end of the process when we ask you for your overall recommendation. I\u2019ll say a bit more about this at the end of this document.","title":"General Information"},{"location":"Clinical Content/CC2-CKM-template-review/#invitation","text":"You will have received an email invitation to review a template. In the body of the email there will be four choices: If you are ready to review the template you should select \u2018Accept and review template now\u2019 . This will take you to the relevant page for this review in Clinical Knowledge Manager (see Section 4). If you want to be involved in the review but you don\u2019t have time right now, you can select \u2018Accept and review template later\u2019 . You will receive a reminder shortly before the review period expires. You can also review the template at any time by simply logging onto Clinical Knowledge Manager and using the dashboard to find the review (see Section 5). If you don\u2019t want to be involved in this review round, you can select \u2018Decline this invitation\u2019 . You may get another invitation later if there is another review round for the same template. If you don\u2019t want to review this template at all, you can select \u2018Decline all invitations for this template\u2019 . You may get an invitation in the future to participate in a review for another template or archetype.","title":"Invitation"},{"location":"Clinical Content/CC2-CKM-template-review/#review-template-now","text":"","title":"Review template now"},{"location":"Clinical Content/CC2-CKM-template-review/#overview","text":"When you have chosen to perform the review now from your invitation email, you will be presented with the Clinical Knowledge Manager login screen. Enter your login name and password. Your login name is usually in the format firstname.surname and was allocated when you first signed up to Clinical Knowledge Manager. Once you have signed in, the Invitation tab of the template review screen will be displayed: You now have several choices: Display a simple view of the template to get an overview of the content. Move to next tab to start reviewing the template. Use the tabs at the top to navigate through the different parts of the review. The buttons at the bottom are available at any time during the review process and can be used to save and continue , save and close or save and submit the review . Note that the last one should only be used when you have completed the review. It is advisable to save and continue at regular intervals.","title":"Overview"},{"location":"Clinical Content/CC2-CKM-template-review/#simple-view","text":"Before you start the review process it may be useful to switch to the simple view of the template (see (1) in the screenshot above), just to see a more compact view of the content. This will be displayed in a separate tab (see (1) in the screenshot below) to allow you to toggle back and forth between the simple view and the review screen. As well as looking at the simple view itself, you can also switch to a printable view (2) or a mindmap view (3). Either of these may be helpful to understand and visualise the content of the template.","title":"Simple view"},{"location":"Clinical Content/CC2-CKM-template-review/#starting-the-review","text":"To start the review, just toggle back to the review screen and click on Next at the bottom of the screen or select the Header tab.","title":"Starting the review"},{"location":"Clinical Content/CC2-CKM-template-review/#the-header-tab","text":"The Header tab displays the template name and the purpose of the template. You can add comments on both by simply typing into the box entitled \u2018Your Comment\u2019. When you have finished with your comments or if you have no comments on the Header, click on Next or select the Data tab to move to the main body of the template. Below are a couple of examples of typical comments made on the Header details in other template reviews:","title":"The Header tab"},{"location":"Clinical Content/CC2-CKM-template-review/#the-data-tab","text":"The Data tab displays the main body of the template. This part is quite long, so here are some useful hints: The body of the template has four columns: The name of the data point (e.g. Location, Date injury occurred, Pattern ). The description of the data point (e.g. The date on which the injury occurred or Narrative description about the pattern of the symptom or sign during this episode ). Details of picklist values, units of measure, minimum/maximum values, default values. This column is often empty where no constraints have been applied. The Comments box where you can add your comments, suggestions or questions. Some of the lines just reflect the underlying structure and do not actually contain any clinical data as such. Examples of these are: As a rule there is no need to comment on these, unless you feel that the name is misleading or problematic in any way. These structural lines are coloured differently and have a black triangle icon which you allows you to hide the details underneath once you have finished commenting on it. You can unhide the details by clicking the white triangle icon next to a closed section. Closing each part with the black triangle icon once you finish reviewing that part may be helpful as you go through the review. You can always reopen it with the white triangle icon . You don\u2019t have to complete the review in one go. The Save and close icon allows you to save what you\u2019ve done so far and come back to it later by logging back into Clinical Knowledge Manager and selecting the review through the Dashboard (see Section 5). Below are some examples of typical comments on other template reviews: When you have reviewed the whole body of the template and added your comments, questions or suggestions, click on Next or select the Overall comments tab to move to the final step of the review. You can also interrupt your review and come back to it at any time by using the Save and close option at the bottom of the view.","title":"The Data tab"},{"location":"Clinical Content/CC2-CKM-template-review/#the-overall-comments-tab","text":"The final part of the review allows you to make some more general comments about the template and complete the overall recommendation. As with the previous section, comments are optional, and you don\u2019t have to add anything. Below are some examples of overall comments made in other template reviews: The Overall Recommendation is mandatory, and this is the only part you must complete if you want to submit your review. You must select one of these options: Accept Minor revision Major revision Reject Abstain The screenshot below explains how these options are intended to be used. You can also display this information by clicking on the information icon next to the Overall Recommendation field.","title":"The Overall Comments tab"},{"location":"Clinical Content/CC2-CKM-template-review/#the-dashboard","text":"If you want to go back to your review later or you have selected to accept a review but complete it later, you can log into the Clinical Knowledge Manager ( http://www.clinicalmodels.org.uk/ckm/ ) and select the Dashboard tab. By default, the top left hand quadrant displays any outstanding reviews. Click on the line displaying your review and select Start your review now.","title":"The Dashboard"},{"location":"EHR Explorer/EHREX1-intro/","text":"What is the EHR Explorer? The EHR Explorer provides an administrative interface into the openEHR Clinical Data Repository, enabling administrators and developers to upload clinical artefacts, to build, test and save simple forms against these templates and build, run and save queries into the data. How can I access it? When you created your Operon account and provisioned your first Operino, you received an email with your domain and login details. If you are accessing a domain on behalf of someone else, you will need to get the credentials from them.","title":"Introduction to EHR Explorer"},{"location":"EHR Explorer/EHREX1-intro/#what-is-the-ehr-explorer","text":"The EHR Explorer provides an administrative interface into the openEHR Clinical Data Repository, enabling administrators and developers to upload clinical artefacts, to build, test and save simple forms against these templates and build, run and save queries into the data.","title":"What is the EHR Explorer?"},{"location":"EHR Explorer/EHREX1-intro/#how-can-i-access-it","text":"When you created your Operon account and provisioned your first Operino, you received an email with your domain and login details. If you are accessing a domain on behalf of someone else, you will need to get the credentials from them.","title":"How can I access it?"},{"location":"EHR Explorer/EHREX2-navigation/","text":"Home page The home page provides access to the different functions. Each of the functions is briefly described below, and there is also a separate page for each which describes all the available functionality in more detail. Navigation To navigate to any of the available functions, just use the menu bar at the top. 1. Settings and log out The button on the very right hand side provides access to the settings screen and allows you to log out. On the settings screen you can define your default domain (if you have more than one), choose whether to have a domain selector available on the login screen, define client and server languages, enable \"|\" notation and choose the template list label from either Template Id, Default name or Localised name. 2. Models The Models option switches to the Models view where you can import, search and view archetypes and templates. To find out more about this function, click here 3. Form Builder The Form Builder option allows you to create, run, save and test basic forms for entering data directly in the Clinical Data Repository. To find out more about this function, click here 4. Documents Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 5. Query Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Home page and navigation"},{"location":"EHR Explorer/EHREX2-navigation/#home-page","text":"The home page provides access to the different functions. Each of the functions is briefly described below, and there is also a separate page for each which describes all the available functionality in more detail.","title":"Home page"},{"location":"EHR Explorer/EHREX2-navigation/#navigation","text":"To navigate to any of the available functions, just use the menu bar at the top.","title":"Navigation"},{"location":"EHR Explorer/EHREX2-navigation/#146-settings-and-log-out","text":"The button on the very right hand side provides access to the settings screen and allows you to log out. On the settings screen you can define your default domain (if you have more than one), choose whether to have a domain selector available on the login screen, define client and server languages, enable \"|\" notation and choose the template list label from either Template Id, Default name or Localised name.","title":"1. Settings and log out"},{"location":"EHR Explorer/EHREX2-navigation/#246-models","text":"The Models option switches to the Models view where you can import, search and view archetypes and templates. To find out more about this function, click here","title":"2. Models"},{"location":"EHR Explorer/EHREX2-navigation/#346-form-builder","text":"The Form Builder option allows you to create, run, save and test basic forms for entering data directly in the Clinical Data Repository. To find out more about this function, click here","title":"3. Form Builder"},{"location":"EHR Explorer/EHREX2-navigation/#446-documents","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"4. Documents"},{"location":"EHR Explorer/EHREX2-navigation/#546-query","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"5. Query"},{"location":"EHR Explorer/EHREX3-models/","text":"Overview The Models function allows you to manage the templates and archetypes used in your Clinical Data Repository. You can import new templates (which will automatically import the associated archetypes), delete templates which are no longer required and view the content of existing templates and archetypes. You can access the Model function by clicking on the Models button (2) in the top menu. Import","title":"\"Models\""},{"location":"EHR Explorer/EHREX3-models/#overview","text":"The Models function allows you to manage the templates and archetypes used in your Clinical Data Repository. You can import new templates (which will automatically import the associated archetypes), delete templates which are no longer required and view the content of existing templates and archetypes. You can access the Model function by clicking on the Models button (2) in the top menu.","title":"Overview"},{"location":"EHR Explorer/EHREX3-models/#import","text":"","title":"Import"},{"location":"EHR Explorer/EHREX4-form-builder/","text":"section provides \u2026\u200b --- Overview The Form Builder function (3) allows you to build, save and test simple data entry forms to add data directly into your Clinical Data Repository. Build Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Save Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Run Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"\"Form Builder\" permalink: EHREX4-form-builder.html summary: This"},{"location":"EHR Explorer/EHREX4-form-builder/#overview","text":"The Form Builder function (3) allows you to build, save and test simple data entry forms to add data directly into your Clinical Data Repository.","title":"Overview"},{"location":"EHR Explorer/EHREX4-form-builder/#build","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Build"},{"location":"EHR Explorer/EHREX4-form-builder/#save","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Save"},{"location":"EHR Explorer/EHREX4-form-builder/#run","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Run"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/","text":"Laboratory 'Panels' Most laboratory results in haematology, biochemistry, immunology and virology are expressed as single analytes or as panels. Microbiology and histopathology (anatomic pathology) reports have a different structure and are modelled differently, and are described elsewhere. Overview With the release of the laboratory Test series of archetype to Team Review, it was felt useful to provide guidance on the use of these archetypes, as, based on implementation experience, a very different approach is now suggested for handling laboratory tests. Glossary Laboratory Report The overall report as received from the laboratory, generally a COMPOSITION, which will contain one or more `Laboratory Tests\u2019. Laboratory Test The container OBSERVATION which contains details of the ordered laboratory investigation and overall conclusions. Examples: \"Urea and Electrolytes\", \"Full blood count\", \"Glucose\", \"Prostate Cancer Histopathology\" Laboratory Result (Analyte) An individual result with a value. e.g. Hb, White cell count, Urea, Sodium, Glucose. A Lab Test may include only a single analyte or multiple analytes, often as part of a formal Laboratory panel . Each Laboratory Result will have a name e.g. \"Hb\" and a Value e.g. \"12.2g/dl\". The Name is generally coded, preferably with an external reference terminology like SNOMED CT, NPU or LOINC but local laboratory codes or controlled vocabularies are commonly used. Laboratory Panel A grouping of laboratory analytes, that generally reflect a grouped Test request, often aligned to the output of an automatic group analysis device. The exact make-up of a laboratory panel varies between labs and lab analysers. i.e. The analytes included in a \"Full blood Count\", whilst broadly similar, are not consistent across analysers. Notes Where an individual analyte is requested the Test Name and the Result Name may be identical. Contexts of modelling use Laboratory tests need to modelled in two quite different ways: Message-driven contexts Laboratory results are most commonly imported automatically via a structured message such as HL7v2, though other national messaging standards exist. The message structures can be quite variable and identification of the lab test and lab analytes make use of terminology. The exact structure of the incoming data is highly variable, and will depend on laboratory policy, variability of adherence to national standards, the exact lab analyser device used. In essence the modeller is at the mercy of the laboratory message, and the target models have to be able to cope with inconsistent structures and coding. UI-driven contexts In some circumstances, the modeller is asked to construct a dataset which replicates one or more laboratory tests to underpin data-entry screens, or perhaps to pull data from a specific device. In these cases the optimal structure and optimal coding of test and analyte names will be known, and can be specified in the models. In some systems, both contexts will be required and he challenge is to find an approach that allows consistent querying and retrieval. Previous modelling approaches In previous modelling efforts, a generic OBSERVATION lab_test archetype was often specialised to represent common individual lab analytes or lab panels such as Lipid Profiles , Full Blood count . Whilst this can work well for specific UI-driven contexts, it is much less helpful in messaging-driven contexts. The variable nature of laboratory messaging and, in particular, the variable content of lab panels, makes it difficult for technical teams to map such messages to archetypes where the analyte pattern is strongly modelled. Proposed new modelling approach Use a Generic OBSERVATION laboratory test archetype as the basis for most, if not all laboratory tests, including microbiology and histopathology tests. This handles the ordered test name and other overall test-related data and is heavily aligned with the HL7v2 OBR segment and FHIR Diagnostic report resource. Analyte (individual results) are handled by slotting in a variety of CLUSTER archetypes, the most common pattern being the simple tabular panel represented by CLUSTER.laboratory_test_panel. This pattern will handle the majority of tabular lab tests e.g. haematology and biochemistry. Other tests such as immunology may require different patterns and some specialities such as microbiology and histopathology will require more specific patterns. even where only a single analyte is reported, we recommend that it be carried within a laboratory panel structure to allow for consistent querying. For tabular results in CLUSTER Laboratory Test Panel the result is carried as Result Value with the name of the analyte as the Result Value /name attribute. This will normally be coded with a reference terminology. It is not planned to try to create specific panel archetype specialisations or templates at international level, as, in practice the exact content of each panel varies enormously depending on the analyser and local lab terminology use. We make create a couple of exemplars for demo purposes, or where very specific additional metadata is required e.g. Glucose tolerance testing. If, at a national or local level, it appears possible to construct more definitive hard-wired representations of lab panels, this should be done by analytes and possible units via templating. Some examples will be provided in the international CKM but this will largely have to be a local exercise since it is highly dependent on local terminology use and messaging. Microbiology is particularly difficult as their is a lack of consistent reporting of micro results. Experience shows that it is generally better to work with a more generic archetype which can respond to incoming data at run-time but we will attempt to define aspects of micro reporting, such as antibiotic sensitivities, for which clear standard patterns are emerging. Template examples Template for use in message-driven contexts. An example of a template left generic to receive a variety of individual analytes or laboratory panels via a laboratory message can be found at http://openehr.org/ckm/#showTemplate_1013.26.185 Template for use in UI-driven contexts An example of a template constructed to represent a lipid profile for use to underpin data-entry or where the exact incoming lipid profile panel is known and consistent, is at http://openehr.org/ckm/#showTemplate_1013.26.69 Instance Example \"Structured JSON\": This example of openEHR data in Structured json format, shows how laboratory test names, laboratory result names and values appear in openEHR data. The data format and paths should be identical regardless of whether a UI-driven or message-driven template approach is used. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 { \"laboratory_test#1\" : [ { \"test_name\" : [ { \"|code\" : \"51990-0\" , \"|value\" : \"Basic metabolic panel- Blood\" , \"|terminology\" : \"SNOMED-CT\" } ], \"test_status\" : [ { \"|code\" : \"at0038\" , \"|value\" : \"Final\" , \"|terminology\" : \"local\" } ], \"test_status_timestamp\" : [ \"2015-04-22T00:11:02.518+02:00\" ], \"laboratory_test_panel\" : [ { \"laboratory_result#1\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Urea\" , \"|code\" : \"14937-7\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 7.8 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 2.5 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 6.6 } ] } ] }, ], \"comment\" : [ \"may be technical artefact\" ] }, ], \"laboratory_result#2\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Creatinine\" , \"|code\" : \"14682-9\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 123 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 80 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 110 } ] } ] } ] }, ], \"conclusion\" : [ \"Very rapidly deteriorating renal function\" ], } ], \"laboratory_test#2\" : [ { \"test_name\" : [ { \"|code\" : \"15074-8\" , \"|value\" : \"Glucose\" , \"|terminology\" : \"LOINC\" } ], \"test_status\" : [ { \"|code\" : \"at0038\" , \"|value\" : \"Final\" , \"|terminology\" : \"local\" } ], \"test_status_timestamp\" : [ \"2015-04-22T00:11:02.518+02:00\" ], \"laboratory_test_panel\" : [ { \"laboratory_result\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Glucose\" , \"|code\" : \"15074-8\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 4.2 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 1.3 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 6.6 } ] } ] } ] } ], \"comment\" : [ \"may be technical artefact\" ] } ], \"conclusion\" : [ \"Normal for age\" ] } ]","title":"Lab test implementation guidance"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#laboratory-panels","text":"Most laboratory results in haematology, biochemistry, immunology and virology are expressed as single analytes or as panels. Microbiology and histopathology (anatomic pathology) reports have a different structure and are modelled differently, and are described elsewhere.","title":"Laboratory 'Panels'"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#overview","text":"With the release of the laboratory Test series of archetype to Team Review, it was felt useful to provide guidance on the use of these archetypes, as, based on implementation experience, a very different approach is now suggested for handling laboratory tests.","title":"Overview"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#glossary","text":"Laboratory Report The overall report as received from the laboratory, generally a COMPOSITION, which will contain one or more `Laboratory Tests\u2019. Laboratory Test The container OBSERVATION which contains details of the ordered laboratory investigation and overall conclusions. Examples: \"Urea and Electrolytes\", \"Full blood count\", \"Glucose\", \"Prostate Cancer Histopathology\" Laboratory Result (Analyte) An individual result with a value. e.g. Hb, White cell count, Urea, Sodium, Glucose. A Lab Test may include only a single analyte or multiple analytes, often as part of a formal Laboratory panel . Each Laboratory Result will have a name e.g. \"Hb\" and a Value e.g. \"12.2g/dl\". The Name is generally coded, preferably with an external reference terminology like SNOMED CT, NPU or LOINC but local laboratory codes or controlled vocabularies are commonly used. Laboratory Panel A grouping of laboratory analytes, that generally reflect a grouped Test request, often aligned to the output of an automatic group analysis device. The exact make-up of a laboratory panel varies between labs and lab analysers. i.e. The analytes included in a \"Full blood Count\", whilst broadly similar, are not consistent across analysers.","title":"Glossary"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#notes","text":"Where an individual analyte is requested the Test Name and the Result Name may be identical.","title":"Notes"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#contexts-of-modelling-use","text":"Laboratory tests need to modelled in two quite different ways: Message-driven contexts Laboratory results are most commonly imported automatically via a structured message such as HL7v2, though other national messaging standards exist. The message structures can be quite variable and identification of the lab test and lab analytes make use of terminology. The exact structure of the incoming data is highly variable, and will depend on laboratory policy, variability of adherence to national standards, the exact lab analyser device used. In essence the modeller is at the mercy of the laboratory message, and the target models have to be able to cope with inconsistent structures and coding. UI-driven contexts In some circumstances, the modeller is asked to construct a dataset which replicates one or more laboratory tests to underpin data-entry screens, or perhaps to pull data from a specific device. In these cases the optimal structure and optimal coding of test and analyte names will be known, and can be specified in the models. In some systems, both contexts will be required and he challenge is to find an approach that allows consistent querying and retrieval.","title":"Contexts of modelling use"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#previous-modelling-approaches","text":"In previous modelling efforts, a generic OBSERVATION lab_test archetype was often specialised to represent common individual lab analytes or lab panels such as Lipid Profiles , Full Blood count . Whilst this can work well for specific UI-driven contexts, it is much less helpful in messaging-driven contexts. The variable nature of laboratory messaging and, in particular, the variable content of lab panels, makes it difficult for technical teams to map such messages to archetypes where the analyte pattern is strongly modelled.","title":"Previous modelling approaches"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#proposed-new-modelling-approach","text":"Use a Generic OBSERVATION laboratory test archetype as the basis for most, if not all laboratory tests, including microbiology and histopathology tests. This handles the ordered test name and other overall test-related data and is heavily aligned with the HL7v2 OBR segment and FHIR Diagnostic report resource. Analyte (individual results) are handled by slotting in a variety of CLUSTER archetypes, the most common pattern being the simple tabular panel represented by CLUSTER.laboratory_test_panel. This pattern will handle the majority of tabular lab tests e.g. haematology and biochemistry. Other tests such as immunology may require different patterns and some specialities such as microbiology and histopathology will require more specific patterns. even where only a single analyte is reported, we recommend that it be carried within a laboratory panel structure to allow for consistent querying. For tabular results in CLUSTER Laboratory Test Panel the result is carried as Result Value with the name of the analyte as the Result Value /name attribute. This will normally be coded with a reference terminology. It is not planned to try to create specific panel archetype specialisations or templates at international level, as, in practice the exact content of each panel varies enormously depending on the analyser and local lab terminology use. We make create a couple of exemplars for demo purposes, or where very specific additional metadata is required e.g. Glucose tolerance testing. If, at a national or local level, it appears possible to construct more definitive hard-wired representations of lab panels, this should be done by analytes and possible units via templating. Some examples will be provided in the international CKM but this will largely have to be a local exercise since it is highly dependent on local terminology use and messaging. Microbiology is particularly difficult as their is a lack of consistent reporting of micro results. Experience shows that it is generally better to work with a more generic archetype which can respond to incoming data at run-time but we will attempt to define aspects of micro reporting, such as antibiotic sensitivities, for which clear standard patterns are emerging.","title":"Proposed new modelling approach"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#template-examples","text":"","title":"Template examples"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#template-for-use-in-message-driven-contexts","text":"An example of a template left generic to receive a variety of individual analytes or laboratory panels via a laboratory message can be found at http://openehr.org/ckm/#showTemplate_1013.26.185","title":"Template for use in message-driven contexts."},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#template-for-use-in-ui-driven-contexts","text":"An example of a template constructed to represent a lipid profile for use to underpin data-entry or where the exact incoming lipid profile panel is known and consistent, is at http://openehr.org/ckm/#showTemplate_1013.26.69","title":"Template for use in UI-driven contexts"},{"location":"Implementation guidance/IMP1-lab-test-imp-guide/#instance-example-structured-json","text":"This example of openEHR data in Structured json format, shows how laboratory test names, laboratory result names and values appear in openEHR data. The data format and paths should be identical regardless of whether a UI-driven or message-driven template approach is used. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 { \"laboratory_test#1\" : [ { \"test_name\" : [ { \"|code\" : \"51990-0\" , \"|value\" : \"Basic metabolic panel- Blood\" , \"|terminology\" : \"SNOMED-CT\" } ], \"test_status\" : [ { \"|code\" : \"at0038\" , \"|value\" : \"Final\" , \"|terminology\" : \"local\" } ], \"test_status_timestamp\" : [ \"2015-04-22T00:11:02.518+02:00\" ], \"laboratory_test_panel\" : [ { \"laboratory_result#1\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Urea\" , \"|code\" : \"14937-7\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 7.8 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 2.5 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 6.6 } ] } ] }, ], \"comment\" : [ \"may be technical artefact\" ] }, ], \"laboratory_result#2\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Creatinine\" , \"|code\" : \"14682-9\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 123 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 80 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 110 } ] } ] } ] }, ], \"conclusion\" : [ \"Very rapidly deteriorating renal function\" ], } ], \"laboratory_test#2\" : [ { \"test_name\" : [ { \"|code\" : \"15074-8\" , \"|value\" : \"Glucose\" , \"|terminology\" : \"LOINC\" } ], \"test_status\" : [ { \"|code\" : \"at0038\" , \"|value\" : \"Final\" , \"|terminology\" : \"local\" } ], \"test_status_timestamp\" : [ \"2015-04-22T00:11:02.518+02:00\" ], \"laboratory_test_panel\" : [ { \"laboratory_result\" : [ { \"result_value\" : [ { \"_name\" : [ { \"|value\" : \"Glucose\" , \"|code\" : \"15074-8\" , \"|terminology\" : \"LOINC\" } ], \"|magnitude\" : 4.2 , \"|unit\" : \"mmol/l\" , \"_normal_range\" : [ { \"lower\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 1.3 } ], \"upper\" : [ { \"|unit\" : \"mmol/l\" , \"|magnitude\" : 6.6 } ] } ] } ] } ], \"comment\" : [ \"may be technical artefact\" ] } ], \"conclusion\" : [ \"Normal for age\" ] } ]","title":"Instance Example \"Structured JSON\":"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/","text":"ES0-overview-openehr-ehrscape.html summary: This section provides an overview of the basic concepts of openEHR and introduces the Operon Ehrscape service --- Introduction openEHR is a open specification for the information model of an electronic health record, published and maintained by the openEHR Foundation . The full openEHR specification is complex and beyond the scope of this simple overview. In summary, an application developer interacts with an an openEHR system and a standardised information model via a simple set of \u2018service\u2019 APIs. openEHR does not itself create and publish EHR solutions or applications, rather it provides a specification for a key part of the technology stack on which other developers base their systems. The value of this approach is in reducing the effort to meet the needs of continually changing clinical requirements while increasing the likelihood of interoperability. The information model and querying/persistence are defined separately via the use of shareable (normally open-sourced) archetypes and templates, There is no direct interaction with the persistence layer, instead all of the interactions with an openEHR system, including querying happens via the information model. In essence this is not dissimilar to the kind of abstraction provided by Django or Ruby Active Objects, but is designed to work with the health domain, is much more extensible, and is designed to work in a completely language and technology-neutral manner. openEHR systems can be built on any programming language, OS platform and with any persistence solution - examples of SQL Server, Oracle, PostgreSQL, mongoDB and MumpsDB solutions exist. It is the responsibility of the back-end developer to map their chosen persistence solution to the openEHR information model and querying system. Ehrscape is an API wrapper for an implementation of the openEHR specification. The overall structure of an openEHR clinical system is \u2026 1 2 3 4 5 6 7 8 9 10 11 Physical CDR Virtual CDR (Ehrscape Domain) EHR (FOLDER) COMPOSITION (SECTION) ENTRY (CLUSTER) ELEMENT name value CDR - Care Data Repository All of the records within a single namespaced patient data repository. In the Ehrscape environment, a single physical repository is represented as a number of independent virtual \u2018domains\u2019 each of which can be regarded as a separate CDR. EHR - Electronic Health Record The top-level container of all clinical records for a single patient. FOLDER (optional) A high-level grouping of Compositions. Not implemented in Ehrscape, and not in common use generally COMPOSITION A document-level container for all clinical records. This equates to an Encounter, a Lab Report, a Discharge summary, a set of Nursing Observations. All openEHR data is stored within the context of a composition and always includes clinical/medico-legal context such as patient, clinical author details, encounter times etc. The Composition is the container for structured/ coded data with granular clinical statements such as procedure, blood pressure, allergy expressed as an ENTRY, within which the leaf data is contained in ELEMENTS e.g Systolic, Diastolic, Cuff size. Compositions are versioned and fully-audit trailed, so that previous versions can always be retrieved. Two forms of persistence/versioning strategy can be employed \u2018Event document\u2019 strategy Most compositions will be saved as \u2018events\u2019. Each instance of the event creates an entirely new composition with a new unique identifier. This equates to a POST in Restful terms. Examples would be a GP encounter, Nursing observation or Discharge report. Updated versions of these kinds of documents would only be created if an error or inaccuracy needed to be corrected. \u2018Curated document\u2019 strategy A less common, but important versioning strategy involves \u2018curated documents\u2019 where it is important to hold a single instance of a named document, but which requires to be continually updated as a \u2018source-of-truth\u2019. Examples might be a Problem summary, a list of known allergies, or an End-of-Life Care Plan. The common factor with these type of documents is that there should only ever be a single instance which reflects the current known facts or understanding. Of course previous versions must remain accessible for medico-legal purposes. Versioning openEHR systems handle versioning automatically. Any time a new version of an existing document is committed to the system, its unique compositionId identifier \u2018version suffix\u2019 is updated e.g 1 798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::1 \u2192 1 798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::2 In normal operation only the most recent version of the composition is returned by querying or composition retrieval. SECTION (optional) Sections are optional structures which are used to break up complex openEHR Compositions, grouping the Entries into high-level headings e.g. in a Transfer of Care document, Sections might be represented as Allergies, Problems, Procedures, Lab tests etc. Sections are convenient for human consumption and navigation but should not be used to infer meaning. ENTRY In openEHR, all of key clinical content is carried within one of the 5 ENTRY sub-classes: OBSERVATION EVALUATION INSTRUCTION ACTION ADMIN_ENTRY The ENTRY is the container for structured/ coded data via granular clinical statements such as Procedure, Blood pressure, Allergy within which the leaf data is contained in ELEMENTS e.g Systolic, Diastolic, Cuff size. CLUSTER (optional) A Cluster is a branch-like sub-structure of an ENTRY which allow ELEMENTS to be conveniently grouped and possibly repeated e.g in a Lab Test archetype, data related to a single lab analysis result is grouped within a Cluster to allow the whole pattern to be repeated Lab Test Lab Result (Cluster) Result Comment Datetime reported Status In the construct above the cluster allows multiple Lab results to be captured within a single Lab Test. ELEMENT An Element is the leaf-node construct which is basically a name/value pair with a defined datatype. The nature of the datatype determines the exact structure of the Element. Operon Ehrscape domains and EhrExplorer The Operon Ehrscape openEHR service provided by Marand is configured to allow app developers to setup and work their own individual domain , populated with its own dummy patient data and openEHR content models and allows both read and write access to the data and for the upload of new openEHR content models. Each Ehrscape domain has its own login and password and in the near future may also be accessed via an Ouath2 session from trusted provider. There are 2 methods of accessing the ehrscape API Set up a sessionID variable via the GET /session call. This returns a token that can be supplied in the headers of any subsequent API calls. This is the preferred option since it avoids having to log in to Ehrscape for every separate API call. Create a Basic Authentication string and pass this to each API call. This is simpler to work with, particularly where it is not easy to maintain a session variable e.g. in an API testing tool like Postman but incurs an overhead of having to resolve the username and password for each call. Requesting an Ehrscape domain You can request an Ehrscape Domain via the Operon website. You will need to be a registered Operon user and access to your Ehrscape domain will require your Operon login and password. You will also need to provide a simple, unique domain name such as freshehr or cerner . This will be used to create a unique internal server name such as ehrscape.operon.ehrscape used internally by Ehrscape. An example of an ehrscape Domain that is being used for C4H Training might be 1 2 3 login : operon_training password : 223 ergt$ domain_name : ehrscape . c4h . training baseURL The baseURL for all Operon Ehrscape API calls is https://test.operon.systems/rest/v1 . Domain provisioning When your domain is setup you will be provided with the following Access to a personal domain on Operon Ehrscape with login, password and domain name. Access to the Ehrscape EhrExplorer tool. Acess to the Ehrscape ApiExlorer tool. The domain will be populated with Several dummy patents openEHR content models and dummy data for Nursing Vital signs encounter. EhrExplorer The Marand EhrExplorer tool can be used to create openEHR queries and to visualise the openEHR content models being used by your domain Browse to EHRExplorer Enter the name and password for your C4H Ehrscape domain as above Leave the domain field as ehrscape In the navigation bar on the left you can double-click on the Vital signs encounter template, which will open the template in the bottom-right panel. Right-click on nodes for further details of the constraints applied. e.g. If you navigate to '$$$' and right-click you can examine the internal 'atcode' constraints allowed for this element. Ehrscape API browser Browse to EHRScape API Explorer Press the tool setting button and set userName to c4h_train and password to c4h_train99 Any test calls in the API browser will now work against the Operon Training domain. Using Postman to test API calls The Postman add-on is vey useful for testing API calls outside of an application context. Postman collection and environment files are available for the C4H. The collection file contains all of the relevant Ehrscape API calls and a Postman Environment file matching your domain details will be created and which you may import.","title":"\"Overview of openEHR and Ehrscape\" permalink:"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#introduction","text":"openEHR is a open specification for the information model of an electronic health record, published and maintained by the openEHR Foundation . The full openEHR specification is complex and beyond the scope of this simple overview. In summary, an application developer interacts with an an openEHR system and a standardised information model via a simple set of \u2018service\u2019 APIs. openEHR does not itself create and publish EHR solutions or applications, rather it provides a specification for a key part of the technology stack on which other developers base their systems. The value of this approach is in reducing the effort to meet the needs of continually changing clinical requirements while increasing the likelihood of interoperability. The information model and querying/persistence are defined separately via the use of shareable (normally open-sourced) archetypes and templates, There is no direct interaction with the persistence layer, instead all of the interactions with an openEHR system, including querying happens via the information model. In essence this is not dissimilar to the kind of abstraction provided by Django or Ruby Active Objects, but is designed to work with the health domain, is much more extensible, and is designed to work in a completely language and technology-neutral manner. openEHR systems can be built on any programming language, OS platform and with any persistence solution - examples of SQL Server, Oracle, PostgreSQL, mongoDB and MumpsDB solutions exist. It is the responsibility of the back-end developer to map their chosen persistence solution to the openEHR information model and querying system. Ehrscape is an API wrapper for an implementation of the openEHR specification. The overall structure of an openEHR clinical system is \u2026 1 2 3 4 5 6 7 8 9 10 11 Physical CDR Virtual CDR (Ehrscape Domain) EHR (FOLDER) COMPOSITION (SECTION) ENTRY (CLUSTER) ELEMENT name value","title":"Introduction"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#cdr-care-data-repository","text":"All of the records within a single namespaced patient data repository. In the Ehrscape environment, a single physical repository is represented as a number of independent virtual \u2018domains\u2019 each of which can be regarded as a separate CDR.","title":"CDR - Care Data Repository"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#ehr-electronic-health-record","text":"The top-level container of all clinical records for a single patient.","title":"EHR - Electronic Health Record"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#folder-optional","text":"A high-level grouping of Compositions. Not implemented in Ehrscape, and not in common use generally","title":"FOLDER (optional)"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#composition","text":"A document-level container for all clinical records. This equates to an Encounter, a Lab Report, a Discharge summary, a set of Nursing Observations. All openEHR data is stored within the context of a composition and always includes clinical/medico-legal context such as patient, clinical author details, encounter times etc. The Composition is the container for structured/ coded data with granular clinical statements such as procedure, blood pressure, allergy expressed as an ENTRY, within which the leaf data is contained in ELEMENTS e.g Systolic, Diastolic, Cuff size. Compositions are versioned and fully-audit trailed, so that previous versions can always be retrieved. Two forms of persistence/versioning strategy can be employed \u2018Event document\u2019 strategy Most compositions will be saved as \u2018events\u2019. Each instance of the event creates an entirely new composition with a new unique identifier. This equates to a POST in Restful terms. Examples would be a GP encounter, Nursing observation or Discharge report. Updated versions of these kinds of documents would only be created if an error or inaccuracy needed to be corrected. \u2018Curated document\u2019 strategy A less common, but important versioning strategy involves \u2018curated documents\u2019 where it is important to hold a single instance of a named document, but which requires to be continually updated as a \u2018source-of-truth\u2019. Examples might be a Problem summary, a list of known allergies, or an End-of-Life Care Plan. The common factor with these type of documents is that there should only ever be a single instance which reflects the current known facts or understanding. Of course previous versions must remain accessible for medico-legal purposes.","title":"COMPOSITION"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#versioning","text":"openEHR systems handle versioning automatically. Any time a new version of an existing document is committed to the system, its unique compositionId identifier \u2018version suffix\u2019 is updated e.g 1 798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::1 \u2192 1 798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::2 In normal operation only the most recent version of the composition is returned by querying or composition retrieval.","title":"Versioning"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#section-optional","text":"Sections are optional structures which are used to break up complex openEHR Compositions, grouping the Entries into high-level headings e.g. in a Transfer of Care document, Sections might be represented as Allergies, Problems, Procedures, Lab tests etc. Sections are convenient for human consumption and navigation but should not be used to infer meaning.","title":"SECTION (optional)"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#entry","text":"In openEHR, all of key clinical content is carried within one of the 5 ENTRY sub-classes: OBSERVATION EVALUATION INSTRUCTION ACTION ADMIN_ENTRY The ENTRY is the container for structured/ coded data via granular clinical statements such as Procedure, Blood pressure, Allergy within which the leaf data is contained in ELEMENTS e.g Systolic, Diastolic, Cuff size.","title":"ENTRY"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#cluster-optional","text":"A Cluster is a branch-like sub-structure of an ENTRY which allow ELEMENTS to be conveniently grouped and possibly repeated e.g in a Lab Test archetype, data related to a single lab analysis result is grouped within a Cluster to allow the whole pattern to be repeated Lab Test Lab Result (Cluster) Result Comment Datetime reported Status In the construct above the cluster allows multiple Lab results to be captured within a single Lab Test.","title":"CLUSTER (optional)"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#element","text":"An Element is the leaf-node construct which is basically a name/value pair with a defined datatype. The nature of the datatype determines the exact structure of the Element.","title":"ELEMENT"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#operon-ehrscape-domains-and-ehrexplorer","text":"The Operon Ehrscape openEHR service provided by Marand is configured to allow app developers to setup and work their own individual domain , populated with its own dummy patient data and openEHR content models and allows both read and write access to the data and for the upload of new openEHR content models. Each Ehrscape domain has its own login and password and in the near future may also be accessed via an Ouath2 session from trusted provider. There are 2 methods of accessing the ehrscape API Set up a sessionID variable via the GET /session call. This returns a token that can be supplied in the headers of any subsequent API calls. This is the preferred option since it avoids having to log in to Ehrscape for every separate API call. Create a Basic Authentication string and pass this to each API call. This is simpler to work with, particularly where it is not easy to maintain a session variable e.g. in an API testing tool like Postman but incurs an overhead of having to resolve the username and password for each call.","title":"Operon Ehrscape domains and EhrExplorer"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#requesting-an-ehrscape-domain","text":"You can request an Ehrscape Domain via the Operon website. You will need to be a registered Operon user and access to your Ehrscape domain will require your Operon login and password. You will also need to provide a simple, unique domain name such as freshehr or cerner . This will be used to create a unique internal server name such as ehrscape.operon.ehrscape used internally by Ehrscape. An example of an ehrscape Domain that is being used for C4H Training might be 1 2 3 login : operon_training password : 223 ergt$ domain_name : ehrscape . c4h . training","title":"Requesting an Ehrscape domain"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#baseurl","text":"The baseURL for all Operon Ehrscape API calls is https://test.operon.systems/rest/v1 .","title":"baseURL"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#domain-provisioning","text":"When your domain is setup you will be provided with the following Access to a personal domain on Operon Ehrscape with login, password and domain name. Access to the Ehrscape EhrExplorer tool. Acess to the Ehrscape ApiExlorer tool. The domain will be populated with Several dummy patents openEHR content models and dummy data for Nursing Vital signs encounter.","title":"Domain provisioning"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#ehrexplorer","text":"The Marand EhrExplorer tool can be used to create openEHR queries and to visualise the openEHR content models being used by your domain Browse to EHRExplorer Enter the name and password for your C4H Ehrscape domain as above Leave the domain field as ehrscape In the navigation bar on the left you can double-click on the Vital signs encounter template, which will open the template in the bottom-right panel. Right-click on nodes for further details of the constraints applied. e.g. If you navigate to '$$$' and right-click you can examine the internal 'atcode' constraints allowed for this element.","title":"EhrExplorer"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#ehrscape-api-browser","text":"Browse to EHRScape API Explorer Press the tool setting button and set userName to c4h_train and password to c4h_train99 Any test calls in the API browser will now work against the Operon Training domain.","title":"Ehrscape API browser"},{"location":"Introduction to openEHR and Ehrscape/ES0-overview-openehr-ehrscape/#using-postman-to-test-api-calls","text":"The Postman add-on is vey useful for testing API calls outside of an application context. Postman collection and environment files are available for the C4H. The collection file contains all of the relevant Ehrscape API calls and a Postman Environment file matching your domain details will be created and which you may import.","title":"Using Postman to test API calls"},{"location":"Introduction to openEHR and Ehrscape/ES1-archetypes-template/","text":"ES1-archetypes-templates.html summary: This section provides a basic overview of openEHR archetypes and templates --- The Operon Ehrscape API consumes, retrieves and queries patient healthcare data using a standardised specification and querying format defined by the openEHR Foundation. openEHR is complex and can be difficult for novices to understand (even those with a solid technical background) but the Ehrscape API considerably simplifies the interface with openEHR systems. openEHR provides a way for clinicians to define and share open-source, vendor-neutral clinical information components ( archetypes and templates ) which can be consumed, persisted and queried by different technology stacks, as long as they adhere to the openEHR specifications. Examples of archetypes used in this project are Proc edure , Symptom , and Imaging result` . These are managed by the openEHR Foundation using the Clinical Knowledge Manager tool and mirrored to Github , with a CC-BY-SA licence. A repository of archetypes and templates designed for UK use is maintained jointly by NHS Scotland, Apperta Foundation and RippleOSI at http://clinicalmodels.org.uk and and mirrored to a Git repository . HSCIC also have an openEHR CKM repository at http://ckm.hscic.gov.uk/ckm/ .","title":"\"openEHR Archetypes and Templates\" permalink:"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/","text":"model --- The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes. The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as archetypes Key openEHR datatypes openEHR has a very rich set of allowable datatypes. A full definition is beyond the scope of this document but developers new to this field may find the following notes helpful. Datatype: text Allows the recording of simple, unformatted text. openEHR does not normally constrain the length of string. 1 asthma_diary_entry/history:0/story_history/comment: Feeling much better, Datatype: codedText Is a commonly used datatype in openEHR systems and is a sub-class of text. i.e where-ever text is specified codedText can be used instead. Codes may be 'external' e.g. SNOMED CT or 'local', where they are defined within archetypes, have the form 'atxxxxx' and are commonly referred to as 'atCodes' A codedText element always includes the terminologyID, the code itself and the text of the coded concept (Rubric). Where a codedText item is required, allowed value(s) are expressed in the form: 1 2 3 4 terminologyId :: code :: rubric local :: at0007 :: Dental swelling SNOMED - CT :: 123456 :: No pathology found When a codedText item is added to a FLAT JSON format document, you must give the code, value and terminology, unless this is a local (atCode) code, in which case only the code needs to be provided. External terminology e.g SNOMED CT Code, terminology and value must be specified 1 2 3 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|code': '23924001', 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|value': 'chest tightness', 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|terminology': 'SNOMED-CT', Local 'atCode' e.g at0007 Only the code needs to be specified - the value and terminology are not required since they are pre-defined in the openEHR template.. 1 'asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/test_result_name|code': 'at0071' Datatype: ordinal Combines codedText with a score, expressed as an integer. 1 2 3 4 5 6 7 0 : Green ` local :: at0022 :: Green ` 1 : Amber ` local :: at0023 :: Amber ` 2 : Red ` local :: at0024 :: Red ` 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code' : 'at0024' , 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|ordinal' : 2 , 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|value' : 'Red' , Datatype: count count is a simple integer. 1 'community_dental_final_assessment_letter/investigations_and_results:0/imaging_examination_result:0/result_group/decayed_teeth/decayed_teeth': 4, Datatype: datetime Records a date or date and time using the ISO8061 format . 1 'ctx/time': '2014-09-23T00:11:02.518+02:00' Datatype: quantity Records a physical quantity along with the appropriate SI units, which should normally be compliant with UCUM . 1 2 \"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|magnitude\": 550, \"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|unit\": \"l/min\", Key openEHR concepts and classes External identifiers The subjectId (sometimes called externalId) is a patient identifier by which the patient is known outwith the openEHR system e.g. a hospital identifier or NHS number. EHR In an openEHR system, each patient has an ehr (a per-patient electronic health record) with a unique ehrId identifier (usually a guid). All references to openEHR patient data are via this ehrId. An API call GET ehr/ is used to reference the ehrId from the provided subjectId/externalId. Example ehrId: 8fa77360-683c-4989-be5e-89a192624b43 Other subsequent calls to the openEHR system for that particular patient are via the ehrId. COMPOSITION All openEHR data is committed inside a composition , a document-level container which is given a unique compositionId . If the composition is subsequently updated the root compositionId remain unchanged but its version number is incremented. All previous composition versions are retained for audit/legal purposes. Initial version 2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::1 Revised version 2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::2 If you need to retrieve a composition, it is normally ok to simply use the root part 2cf04d6c-31e8-4599-a14b-9a0add4de5d9 which will return the latest revision in the current repository. openEHR Composition file formats In general, committing or retrieving a composition to/from an openEHR system involves sending or receiving a structured XML or JSON file via a simple API. The current standard 'canonical XML' openEHR Composition format is defined by a set of standard schema . More recently, openEHR implementers have started to develop alternative custom JSON formats (usuually with converters to/from the canonical XML format). The Operon Ehrscape API , developed by Marand, provides a simple restful API which hides much of the complexity of the underlying openEHR server accepting simpler, flatter forms of composition data, using defaults within the template schema to correctly populate the raw openEHR data which is stored internally. The FLAT JSON format is just a set of simple name/value pairs where the 'name' carries the path to each element. You do not need to parse this path. You should normally use this FLAT JSON format, which is easier for new openEHR users. e.g. FLAT JSON format \"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/clinical_factors|code\": \"at0025\", \u2026 STRUCTURED JSON format 1 2 3 4 5 6 7 8 9 \u2026 \"clinical_factors\": [ { \"|code\": \"at0025\", \"|terminology\": \"local\", \"|value\": \"Teeth with carious lesions\" } ] \u2026 RAW XML format 1 2 3 4 5 6 7 8 9 10 11 \u2026 <ns2:value xsi:type= \"ns2:DV_CODED_TEXT\" > <ns2:value <Teeth with carious lesions</ns2:value > <ns2:defining_code> <ns2:terminology_id> <ns2:value <local</ns2:value > </ns2:terminology_id> <ns2:code_string <at0025</ns2:code_string > </ns2:defining_code> </ns2:value> </ns2:value> \u2026 Key openEHR Reference model attributes A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model. committer This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name. composition/composer This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as composer_name . composition/context/start_time This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time. composition/context/health_care_facility This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place. observation/time This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the ctx header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026 1 2 3 4 5 6 7 8 'ctx/composer_name': 'Rebecca Wassall', 'ctx/health_care_facility|id': '999999-345', 'ctx/health_care_facility|name': 'Northumbria Community NHS', 'ctx/id_namespace': 'NHS-UK', 'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3', 'ctx/language': 'en', 'ctx/territory': 'GB', 'ctx/time': '2014-09-23T00:11:02.518+02:00', Handling specific openEHR datatypes text Text handling is normally straightforward. FLAT + STRUCTURED 1 2 3 \"synopsis\": [ \"Significant dental issues.\" ] codedText For an external terminology, the terminologyId, code and text value must be supplied but in JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied. STRUCTURED JSON format 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Internal ( local ) code : \"dental_swelling\" : [ { \"|code\" : \"at0006\" , } ] External terminology : \"symptom_name\" : [ { \"|code\" : \"102616008\" , \"|terminology\" : \"SNOMED-CT\" , \"|value\" : \"Painful mouth\" } ] FLAT JSON format 1 2 3 4 5 6 7 Internal ( local ) code : \"community_dental_final_assessment_letter/examination_findings:0/physical_examination_findings:0/oral_examination/dental_swelling|code\" : \"at0006\" External terminology : \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|value\" : \"Painful mouth\" , \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|code\" : \"102616008\" , \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|terminology\" : \"SNOMED-CT\" ordinal For JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied although the ordinal and text value cacomplete are also accpeted FLAT JSON format 1 \"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code\": \"at0024\" STRUCTURED format 1 2 3 4 5 \"caries_risk\": [ { \"|code\": \"at0024\", } ] or 1 2 3 4 5 6 7 \"caries_risk\": [ { \"|code\": \"at0024\", \"|ordinal\": 2, \"|value\": \"Red\" } ] date Dates need to be persisted in the ISO8061 format. and should be displayed in CUI format e.g. 12-Nov-1958 Tricky issues Converting UI checkboxes to/from codedText In a number of places, the UI may best be represented as a set of checkboxes, while the underlying data is modelled as codedText. e.g. Symptoms While it may seem more easier and more logical to use a boolean datatype, this is a common pattern in openEHR datasets which are designed to be interoperable and extensible. Experience has shown that exapnsion of the target valueset and alignment to external terminologies is easier if an enumerated list of codedText is used rather than boolean. In the case of 'Symptom' the rule is \u2026 If the checkbox is ticked, populate the Symptom name with the SNOMED-CT term If the checkbox is unticked, omit the Symptom name element completely. Conversely when loading a persisted dataset, the checkbox should only be checked if the Symptom name element is present and contains SNOMED-CT term 102616008. Multiple occurrence data Some aspects of the form e.g Symptoms are handled as multiple occurrences of the same data point in the underlying dataset.","title":"\"openEHR Reference Model\" permalink: ES2-reference-model.html"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#key-openehr-datatypes","text":"openEHR has a very rich set of allowable datatypes. A full definition is beyond the scope of this document but developers new to this field may find the following notes helpful.","title":"Key openEHR datatypes"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-text","text":"Allows the recording of simple, unformatted text. openEHR does not normally constrain the length of string. 1 asthma_diary_entry/history:0/story_history/comment: Feeling much better,","title":"Datatype: text"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-codedtext","text":"Is a commonly used datatype in openEHR systems and is a sub-class of text. i.e where-ever text is specified codedText can be used instead. Codes may be 'external' e.g. SNOMED CT or 'local', where they are defined within archetypes, have the form 'atxxxxx' and are commonly referred to as 'atCodes' A codedText element always includes the terminologyID, the code itself and the text of the coded concept (Rubric). Where a codedText item is required, allowed value(s) are expressed in the form: 1 2 3 4 terminologyId :: code :: rubric local :: at0007 :: Dental swelling SNOMED - CT :: 123456 :: No pathology found When a codedText item is added to a FLAT JSON format document, you must give the code, value and terminology, unless this is a local (atCode) code, in which case only the code needs to be provided.","title":"Datatype: codedText"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#external-terminology-eg-snomed-ct","text":"Code, terminology and value must be specified 1 2 3 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|code': '23924001', 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|value': 'chest tightness', 'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|terminology': 'SNOMED-CT',","title":"External terminology e.g SNOMED CT"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#local-atcode-eg-at0007","text":"Only the code needs to be specified - the value and terminology are not required since they are pre-defined in the openEHR template.. 1 'asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/test_result_name|code': 'at0071'","title":"Local 'atCode' e.g at0007"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-ordinal","text":"Combines codedText with a score, expressed as an integer. 1 2 3 4 5 6 7 0 : Green ` local :: at0022 :: Green ` 1 : Amber ` local :: at0023 :: Amber ` 2 : Red ` local :: at0024 :: Red ` 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code' : 'at0024' , 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|ordinal' : 2 , 'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|value' : 'Red' ,","title":"Datatype: ordinal"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-count","text":"count is a simple integer. 1 'community_dental_final_assessment_letter/investigations_and_results:0/imaging_examination_result:0/result_group/decayed_teeth/decayed_teeth': 4,","title":"Datatype: count"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-datetime","text":"Records a date or date and time using the ISO8061 format . 1 'ctx/time': '2014-09-23T00:11:02.518+02:00'","title":"Datatype: datetime"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#datatype-quantity","text":"Records a physical quantity along with the appropriate SI units, which should normally be compliant with UCUM . 1 2 \"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|magnitude\": 550, \"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|unit\": \"l/min\",","title":"Datatype: quantity"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#key-openehr-concepts-and-classes","text":"","title":"Key openEHR concepts and classes"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#external-identifiers","text":"The subjectId (sometimes called externalId) is a patient identifier by which the patient is known outwith the openEHR system e.g. a hospital identifier or NHS number.","title":"External identifiers"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#ehr","text":"In an openEHR system, each patient has an ehr (a per-patient electronic health record) with a unique ehrId identifier (usually a guid). All references to openEHR patient data are via this ehrId. An API call GET ehr/ is used to reference the ehrId from the provided subjectId/externalId. Example ehrId: 8fa77360-683c-4989-be5e-89a192624b43 Other subsequent calls to the openEHR system for that particular patient are via the ehrId.","title":"EHR"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#composition","text":"All openEHR data is committed inside a composition , a document-level container which is given a unique compositionId . If the composition is subsequently updated the root compositionId remain unchanged but its version number is incremented. All previous composition versions are retained for audit/legal purposes. Initial version 2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::1 Revised version 2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::2 If you need to retrieve a composition, it is normally ok to simply use the root part 2cf04d6c-31e8-4599-a14b-9a0add4de5d9 which will return the latest revision in the current repository.","title":"COMPOSITION"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#openehr-composition-file-formats","text":"In general, committing or retrieving a composition to/from an openEHR system involves sending or receiving a structured XML or JSON file via a simple API. The current standard 'canonical XML' openEHR Composition format is defined by a set of standard schema . More recently, openEHR implementers have started to develop alternative custom JSON formats (usuually with converters to/from the canonical XML format). The Operon Ehrscape API , developed by Marand, provides a simple restful API which hides much of the complexity of the underlying openEHR server accepting simpler, flatter forms of composition data, using defaults within the template schema to correctly populate the raw openEHR data which is stored internally. The FLAT JSON format is just a set of simple name/value pairs where the 'name' carries the path to each element. You do not need to parse this path. You should normally use this FLAT JSON format, which is easier for new openEHR users. e.g. FLAT JSON format \"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/clinical_factors|code\": \"at0025\", \u2026 STRUCTURED JSON format 1 2 3 4 5 6 7 8 9 \u2026 \"clinical_factors\": [ { \"|code\": \"at0025\", \"|terminology\": \"local\", \"|value\": \"Teeth with carious lesions\" } ] \u2026 RAW XML format 1 2 3 4 5 6 7 8 9 10 11 \u2026 <ns2:value xsi:type= \"ns2:DV_CODED_TEXT\" > <ns2:value <Teeth with carious lesions</ns2:value > <ns2:defining_code> <ns2:terminology_id> <ns2:value <local</ns2:value > </ns2:terminology_id> <ns2:code_string <at0025</ns2:code_string > </ns2:defining_code> </ns2:value> </ns2:value> \u2026","title":"openEHR Composition file formats"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#key-openehr-reference-model-attributes","text":"A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.","title":"Key openEHR Reference model attributes"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#committer","text":"This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.","title":"committer"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#compositioncomposer","text":"This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as composer_name .","title":"composition/composer"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#compositioncontextstart95time","text":"This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.","title":"composition/context/start_time"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#compositioncontexthealth95care95facility","text":"This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.","title":"composition/context/health_care_facility"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#observationtime","text":"This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the ctx header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026 1 2 3 4 5 6 7 8 'ctx/composer_name': 'Rebecca Wassall', 'ctx/health_care_facility|id': '999999-345', 'ctx/health_care_facility|name': 'Northumbria Community NHS', 'ctx/id_namespace': 'NHS-UK', 'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3', 'ctx/language': 'en', 'ctx/territory': 'GB', 'ctx/time': '2014-09-23T00:11:02.518+02:00',","title":"observation/time"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#handling-specific-openehr-datatypes","text":"","title":"Handling specific openEHR datatypes"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#text","text":"Text handling is normally straightforward. FLAT + STRUCTURED 1 2 3 \"synopsis\": [ \"Significant dental issues.\" ]","title":"text"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#codedtext","text":"For an external terminology, the terminologyId, code and text value must be supplied but in JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied. STRUCTURED JSON format 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Internal ( local ) code : \"dental_swelling\" : [ { \"|code\" : \"at0006\" , } ] External terminology : \"symptom_name\" : [ { \"|code\" : \"102616008\" , \"|terminology\" : \"SNOMED-CT\" , \"|value\" : \"Painful mouth\" } ] FLAT JSON format 1 2 3 4 5 6 7 Internal ( local ) code : \"community_dental_final_assessment_letter/examination_findings:0/physical_examination_findings:0/oral_examination/dental_swelling|code\" : \"at0006\" External terminology : \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|value\" : \"Painful mouth\" , \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|code\" : \"102616008\" , \"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|terminology\" : \"SNOMED-CT\"","title":"codedText"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#ordinal","text":"For JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied although the ordinal and text value cacomplete are also accpeted FLAT JSON format 1 \"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code\": \"at0024\" STRUCTURED format 1 2 3 4 5 \"caries_risk\": [ { \"|code\": \"at0024\", } ] or 1 2 3 4 5 6 7 \"caries_risk\": [ { \"|code\": \"at0024\", \"|ordinal\": 2, \"|value\": \"Red\" } ]","title":"ordinal"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#date","text":"Dates need to be persisted in the ISO8061 format. and should be displayed in CUI format e.g. 12-Nov-1958","title":"date"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#tricky-issues","text":"","title":"Tricky issues"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#converting-ui-checkboxes-tofrom-codedtext","text":"In a number of places, the UI may best be represented as a set of checkboxes, while the underlying data is modelled as codedText. e.g. Symptoms While it may seem more easier and more logical to use a boolean datatype, this is a common pattern in openEHR datasets which are designed to be interoperable and extensible. Experience has shown that exapnsion of the target valueset and alignment to external terminologies is easier if an enumerated list of codedText is used rather than boolean. In the case of 'Symptom' the rule is \u2026 If the checkbox is ticked, populate the Symptom name with the SNOMED-CT term If the checkbox is unticked, omit the Symptom name element completely. Conversely when loading a persisted dataset, the checkbox should only be checked if the Symptom name element is present and contains SNOMED-CT term 102616008.","title":"Converting UI checkboxes to/from codedText"},{"location":"Introduction to openEHR and Ehrscape/ES2-reference-model/#multiple-occurrence-data","text":"Some aspects of the form e.g Symptoms are handled as multiple occurrences of the same data point in the underlying dataset.","title":"Multiple occurrence data"},{"location":"Platforms Basics/BASIC3-list-of-services/","text":"Clinical Data Repository Termlex Document Sharing (XDS) Master Patient Index Health Provider Registry Access Control Manager Audit General Purpose Database openEHR Tools Clinical Content","title":"List of available services"},{"location":"Postman/PM1-postman-ehrscape-getting-ready/","text":"First you need to install a copy of the API runner application Postman (Chrome/MacOS/Windows) Get Postman Application This lets you send and receive data from the Ehrscape API without the need for a specific programming language. Postman also allows you to import a preset collection of API calls which we can use to supply a copy of the Ehrscape API and associated 'environment' file, which contains settings for a specific ehrscape domain. A. Run Postman Click the 'Run Postman Button' to import the Postman 'openEHR Ehrscape Clinical Data Repository' API collection and associated Operon Sandpit environment settings. This will automatically install the Ehrscape Collection and Operon Sandpit environment files. or B. Download Postman files from Git Click on these links to download the files to your system: openEHR Ehrscape Collection Operon Sandpit Environment or C. Download your collection files from email If you have received an email containing the collection and environment files to use with Postman. The first step is to download these files ready to then be imported into Postman. Find openEHR Ehrscape Clinical Data Repository.postman_collection in your email and download it to a folder of your choice (normally the Download folder). Find <your_environment_name>.postman_environment in your email and download it to a folder of your choice (normally the Download folder). Please note that for demonstration purposes we are using the C4H Ripple OSI environment in this document. Import Downloaded files into Postman If you have downloaded files from Github of from your email, these now need to be installed in Postman. Open Postman and select Import Locate your two save files and import them. You can either use the Choose Files option to import one at a time or drag and drop the files into the window In the top right hand corner, change the environment to your environment (in the screenshot below that\u2019s the C4H Ripple OSI environment) On the left hand side you can now see the collection files","title":"Getting ready with Postman"},{"location":"Postman/PM1-postman-ehrscape-getting-ready/#a-run-postman","text":"Click the 'Run Postman Button' to import the Postman 'openEHR Ehrscape Clinical Data Repository' API collection and associated Operon Sandpit environment settings. This will automatically install the Ehrscape Collection and Operon Sandpit environment files.","title":"A. Run Postman"},{"location":"Postman/PM1-postman-ehrscape-getting-ready/#or-b-download-postman-files-from-git","text":"Click on these links to download the files to your system: openEHR Ehrscape Collection Operon Sandpit Environment","title":"or B. Download Postman files from Git"},{"location":"Postman/PM1-postman-ehrscape-getting-ready/#or-c-download-your-collection-files-from-email","text":"If you have received an email containing the collection and environment files to use with Postman. The first step is to download these files ready to then be imported into Postman. Find openEHR Ehrscape Clinical Data Repository.postman_collection in your email and download it to a folder of your choice (normally the Download folder). Find <your_environment_name>.postman_environment in your email and download it to a folder of your choice (normally the Download folder). Please note that for demonstration purposes we are using the C4H Ripple OSI environment in this document.","title":"or C. Download your collection files from email"},{"location":"Postman/PM1-postman-ehrscape-getting-ready/#import-downloaded-files-into-postman","text":"If you have downloaded files from Github of from your email, these now need to be installed in Postman. Open Postman and select Import Locate your two save files and import them. You can either use the Choose Files option to import one at a time or drag and drop the files into the window In the top right hand corner, change the environment to your environment (in the screenshot below that\u2019s the C4H Ripple OSI environment) On the left hand side you can now see the collection files","title":"Import Downloaded files into Postman"},{"location":"Postman/PM2-navigate-postman/","text":"Something else Click on the openEHR Ehrscape Clinical Data Repository to reveal the folders, and then click on individual folders to expand and reveal the contents Selecting one of the API calls displays more detail on the right hand side Clicking on the \"x\" icon in the top right hand corner reveals a number of pre-set variables for your selected environment (again the C4H Ripple environment is used just as an example). These pre-sets are used in some of the API calls as defaults.","title":"Navigate Postman"},{"location":"Postman/PM3-using-postman/","text":"Create Session The first step is to create an openEHR session and retrieve the ****sessionId**** token. This allows subsequent API calls to be made without needing to login on each occasion. Navigate to the session folder and highlight Create Session on the left, then click on the Send button. The required credentials are automatically filled in from the Pre-sets file (see Navigating Postman section above) Click the Scroll to responses button in the bottom right hand corner to display the response details. The screenshot below shows the session Id which has been returned in the call. Get EHR Identifier The next step is to get the patient\u2019s internal EHR identifier by sending their external identifier (in this case NHS Number). The ehrId is a unique string which, for security reasons, cannot be associated with the patient, if for instance their openEHR records were leaked. Select Get ehrStatus from subjectId in the ehr folder and then click on the Send button. Again, the patient\u2019s NHS number is taken from the Pre-sets file and is therefore filled in automatically. Click on the Scroll to responses button in the bottom right hand corner to display the response details. The JSON snippet below shows the ehrId for our dummy patient. To store the returned ehrId as a pre-set for the selected environment, highlight the string in the response details, right mouse click, set the environment ( C4H Ripple OSI in this example ) and then select ehrId from the list of attributes. Retrieve Composition ID Now that we have the patient\u2019s EHR identifier, we can use it to locate and retrieve some clinical details. We use an Archetype Query Language (AQL) call to retrieve a list of the identifiers and dates of existing Nursing Vital Signs Observations Composition records. Compositions are document-level records which act as the container for all openEHR patient data. The name/value of the Composition is the root name of the templates composition archetype (case-sensitive). In a real-world example we would query on other factors to ensure we had the \u2018correct\u2019 list. The query we need to run in order to get the composition Id for the most recent vital signs composition for the selected patient is as follows: At this stage you don\u2019t need to worry about the exact syntax and how to create an AQL query. These topics are covered elsewhere, and the Specifications provide the required details. Open the query folder and select Ad-hoc query This is the query string in a format which can be copied and pasted: 1 2 3 4 5 6 7 8 select a / uid / value as compositionId , a / context / start_time / value as start_time from EHR e [ ehr_id / value = '{{ehrId}}' ] contains COMPOSITION a [ openEHR - EHR - COMPOSITION . encounter . v1 ] where a / name / value = 'Nursing Vital Signs Observations' order by a / context / start_time / value desc offset 0 limit 1 In the Ad-hoc Query window click on Param and paste the query string above into the Value field, then click on the Send button. Click the Scroll to response button in the bottom right hand corner to display the response details. The compositionId element in the response is the unqique identifier for the composition and the start_time is the time that the document was authored. We will use the results of this query to retrieve the full composition, so the final action is to store the composition Id as a pre-set. Highlight the string in the response details, right mouse click, set the environment (****C4H Ripple OSI**** in this example) and then select compositionId from the list of attributes Retrieve Composition The next step is to retrieve the composition itself, based on the compositionId we stored in the previous step. Navigate to the composition folder and highlight Read Composition JSON FLAT , then click the Send button The result is shown as a FLAT JSON file below Other formats are JSON RAW, XML RAW or JSON STRUCTURED \u2013 the snippets below show part of the Pulse data Persist Composition The next step is to persist a new composition. The data in the composition is validated against a template, and the first action is to set the correct template Id for composition to be persisted. Navigate to the Template folder and highlight List available templates , then click the Send button. Highlight the Vital Signs Encounter template in the list of available templates, right mouse click, set the environment (****C4H Ripple OSI**** in this example) and then select templateId from the list of attributes Once the template Id is set, we can commit a composition. The following string is an example of a vital signs composition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \"ctx/language\" : \"en\" , \"ctx/territory\" : \"GB\" , \"ctx/composer_name\" : \"Hazel Smith\" , \"ctx/time\" : \"2015-12-10T02:19:00.000Z\" , \"ctx/health_care_facility|id\" : \"999999-345\" , \"ctx/health_care_facility|name\" : \"Northumbria Community NHS\" , \"ctx/id_namespace\" : \"NHS-UK\" , \"ctx/id_scheme\" : \"2.16.840.1.113883.2.1.4.3\" , \"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|magnitude\" : 22 , \"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|unit\" : \"/min\" , \"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|magnitude\" : 101 , \"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|unit\" : \"/min\" , \"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|magnitude\" : 36.6 , \"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|unit\" : \"\u00b0C\" , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|magnitude\" : 100 , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|unit\" : \"mm[Hg]\" , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|magnitude\" : 60 , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|unit\" : \"mm[Hg]\" , \"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|numerator\" : 94 , \"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|denominator\" : 100 , \"nursing_vital_signs_observations/vital_signs:0/national_early_warning_score_rcp_uk:0/total_score\" : 3 _ * As mentioned before, the exact syntax and how to create a composition will be covered elsewhere. At this stage you should just use the syntax string provided above. Navigate to the Composition folder and highlight Commit Composition JSON FLAT . Paste the text above into the Body text box on the right hand side and click on the Send button. The result shows the composition Id for the newly committed composition. Run AQL Query The next step is to run a query on recent vital signs compositions and return a set of key data. Navigate to the query folder and select Ad-hoc Query . This is the query string we are going to use to retrieve the last 5 vital signs compositions and return the relevant readings. Once again, just to clarify: the exact syntax and how to create an AQL query will be covered elsewhere. At this stage you can just copy and paste the query syntax string shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 select a / uid / value as compositionId , a / context / start_time / value as start_time , b_a / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0004 ] / value / magnitude as Rate_magnitude , b_b / data [ at0002 ] / events [ at0003 ] / data [ at0001 ] / items [ at0004 ] / value / magnitude as Heart_Rate_magnitude , b_c / data [ at0002 ] / events [ at0003 ] / data [ at0001 ] / items [ at0004 ] / value / magnitude as Temperature_magnitude , b_f / data [ at0001 ] / events [ at0006 ] / data [ at0003 ] / items [ at0004 ] / value / magnitude as Systolic_magnitude , b_f / data [ at0001 ] / events [ at0006 ] / data [ at0003 ] / items [ at0005 ] / value / magnitude as Diastolic_magnitude , b_g / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0006 ] / value / numerator as spO2_numerator , b_h / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0028 ] / value / magnitude as Total_Score_magnitude from EHR e [ ehr_id / value = '{{ehrId}}' ] contains COMPOSITION a [ openEHR - EHR - COMPOSITION . encounter . v1 ] contains ( OBSERVATION b_a [ openEHR - EHR - OBSERVATION . respiration . v1 ] or OBSERVATION b_b [ openEHR - EHR - OBSERVATION . pulse . v1 ] or OBSERVATION b_c [ openEHR - EHR - OBSERVATION . body_temperature . v1 ] or OBSERVATION b_f [ openEHR - EHR - OBSERVATION . blood_pressure . v1 ] or OBSERVATION b_g [ openEHR - EHR - OBSERVATION . indirect_oximetry . v1 ] or OBSERVATION b_h [ openEHR - EHR - OBSERVATION . news_rcp_uk . v1 ]) where a / name / value = 'Nursing Vital Signs Observations' order by a / context / start_time / value desc In the Ad-hoc query window click on Params and enter the query string into the Value field on the right hand side, then click the Send button. The result set contains the last 5 vital signs compositions and the data points within the compositions. Close Session The final step is to close the openEHR session. To do this, navigate to the session folder and select Delete Session . Click on the Send button. The result will show a null sessionId, indicating that there is no open session.","title":"Using Postman with Ehrscape"},{"location":"Postman/PM3-using-postman/#create-session","text":"The first step is to create an openEHR session and retrieve the ****sessionId**** token. This allows subsequent API calls to be made without needing to login on each occasion. Navigate to the session folder and highlight Create Session on the left, then click on the Send button. The required credentials are automatically filled in from the Pre-sets file (see Navigating Postman section above) Click the Scroll to responses button in the bottom right hand corner to display the response details. The screenshot below shows the session Id which has been returned in the call.","title":"Create Session"},{"location":"Postman/PM3-using-postman/#get-ehr-identifier","text":"The next step is to get the patient\u2019s internal EHR identifier by sending their external identifier (in this case NHS Number). The ehrId is a unique string which, for security reasons, cannot be associated with the patient, if for instance their openEHR records were leaked. Select Get ehrStatus from subjectId in the ehr folder and then click on the Send button. Again, the patient\u2019s NHS number is taken from the Pre-sets file and is therefore filled in automatically. Click on the Scroll to responses button in the bottom right hand corner to display the response details. The JSON snippet below shows the ehrId for our dummy patient. To store the returned ehrId as a pre-set for the selected environment, highlight the string in the response details, right mouse click, set the environment ( C4H Ripple OSI in this example ) and then select ehrId from the list of attributes.","title":"Get EHR Identifier"},{"location":"Postman/PM3-using-postman/#retrieve-composition-id","text":"Now that we have the patient\u2019s EHR identifier, we can use it to locate and retrieve some clinical details. We use an Archetype Query Language (AQL) call to retrieve a list of the identifiers and dates of existing Nursing Vital Signs Observations Composition records. Compositions are document-level records which act as the container for all openEHR patient data. The name/value of the Composition is the root name of the templates composition archetype (case-sensitive). In a real-world example we would query on other factors to ensure we had the \u2018correct\u2019 list. The query we need to run in order to get the composition Id for the most recent vital signs composition for the selected patient is as follows: At this stage you don\u2019t need to worry about the exact syntax and how to create an AQL query. These topics are covered elsewhere, and the Specifications provide the required details. Open the query folder and select Ad-hoc query This is the query string in a format which can be copied and pasted: 1 2 3 4 5 6 7 8 select a / uid / value as compositionId , a / context / start_time / value as start_time from EHR e [ ehr_id / value = '{{ehrId}}' ] contains COMPOSITION a [ openEHR - EHR - COMPOSITION . encounter . v1 ] where a / name / value = 'Nursing Vital Signs Observations' order by a / context / start_time / value desc offset 0 limit 1 In the Ad-hoc Query window click on Param and paste the query string above into the Value field, then click on the Send button. Click the Scroll to response button in the bottom right hand corner to display the response details. The compositionId element in the response is the unqique identifier for the composition and the start_time is the time that the document was authored. We will use the results of this query to retrieve the full composition, so the final action is to store the composition Id as a pre-set. Highlight the string in the response details, right mouse click, set the environment (****C4H Ripple OSI**** in this example) and then select compositionId from the list of attributes","title":"Retrieve Composition ID"},{"location":"Postman/PM3-using-postman/#retrieve-composition","text":"The next step is to retrieve the composition itself, based on the compositionId we stored in the previous step. Navigate to the composition folder and highlight Read Composition JSON FLAT , then click the Send button The result is shown as a FLAT JSON file below Other formats are JSON RAW, XML RAW or JSON STRUCTURED \u2013 the snippets below show part of the Pulse data","title":"Retrieve Composition"},{"location":"Postman/PM3-using-postman/#persist-composition","text":"The next step is to persist a new composition. The data in the composition is validated against a template, and the first action is to set the correct template Id for composition to be persisted. Navigate to the Template folder and highlight List available templates , then click the Send button. Highlight the Vital Signs Encounter template in the list of available templates, right mouse click, set the environment (****C4H Ripple OSI**** in this example) and then select templateId from the list of attributes Once the template Id is set, we can commit a composition. The following string is an example of a vital signs composition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \"ctx/language\" : \"en\" , \"ctx/territory\" : \"GB\" , \"ctx/composer_name\" : \"Hazel Smith\" , \"ctx/time\" : \"2015-12-10T02:19:00.000Z\" , \"ctx/health_care_facility|id\" : \"999999-345\" , \"ctx/health_care_facility|name\" : \"Northumbria Community NHS\" , \"ctx/id_namespace\" : \"NHS-UK\" , \"ctx/id_scheme\" : \"2.16.840.1.113883.2.1.4.3\" , \"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|magnitude\" : 22 , \"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|unit\" : \"/min\" , \"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|magnitude\" : 101 , \"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|unit\" : \"/min\" , \"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|magnitude\" : 36.6 , \"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|unit\" : \"\u00b0C\" , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|magnitude\" : 100 , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|unit\" : \"mm[Hg]\" , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|magnitude\" : 60 , \"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|unit\" : \"mm[Hg]\" , \"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|numerator\" : 94 , \"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|denominator\" : 100 , \"nursing_vital_signs_observations/vital_signs:0/national_early_warning_score_rcp_uk:0/total_score\" : 3 _ * As mentioned before, the exact syntax and how to create a composition will be covered elsewhere. At this stage you should just use the syntax string provided above. Navigate to the Composition folder and highlight Commit Composition JSON FLAT . Paste the text above into the Body text box on the right hand side and click on the Send button. The result shows the composition Id for the newly committed composition.","title":"Persist Composition"},{"location":"Postman/PM3-using-postman/#run-aql-query","text":"The next step is to run a query on recent vital signs compositions and return a set of key data. Navigate to the query folder and select Ad-hoc Query . This is the query string we are going to use to retrieve the last 5 vital signs compositions and return the relevant readings. Once again, just to clarify: the exact syntax and how to create an AQL query will be covered elsewhere. At this stage you can just copy and paste the query syntax string shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 select a / uid / value as compositionId , a / context / start_time / value as start_time , b_a / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0004 ] / value / magnitude as Rate_magnitude , b_b / data [ at0002 ] / events [ at0003 ] / data [ at0001 ] / items [ at0004 ] / value / magnitude as Heart_Rate_magnitude , b_c / data [ at0002 ] / events [ at0003 ] / data [ at0001 ] / items [ at0004 ] / value / magnitude as Temperature_magnitude , b_f / data [ at0001 ] / events [ at0006 ] / data [ at0003 ] / items [ at0004 ] / value / magnitude as Systolic_magnitude , b_f / data [ at0001 ] / events [ at0006 ] / data [ at0003 ] / items [ at0005 ] / value / magnitude as Diastolic_magnitude , b_g / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0006 ] / value / numerator as spO2_numerator , b_h / data [ at0001 ] / events [ at0002 ] / data [ at0003 ] / items [ at0028 ] / value / magnitude as Total_Score_magnitude from EHR e [ ehr_id / value = '{{ehrId}}' ] contains COMPOSITION a [ openEHR - EHR - COMPOSITION . encounter . v1 ] contains ( OBSERVATION b_a [ openEHR - EHR - OBSERVATION . respiration . v1 ] or OBSERVATION b_b [ openEHR - EHR - OBSERVATION . pulse . v1 ] or OBSERVATION b_c [ openEHR - EHR - OBSERVATION . body_temperature . v1 ] or OBSERVATION b_f [ openEHR - EHR - OBSERVATION . blood_pressure . v1 ] or OBSERVATION b_g [ openEHR - EHR - OBSERVATION . indirect_oximetry . v1 ] or OBSERVATION b_h [ openEHR - EHR - OBSERVATION . news_rcp_uk . v1 ]) where a / name / value = 'Nursing Vital Signs Observations' order by a / context / start_time / value desc In the Ad-hoc query window click on Params and enter the query string into the Value field on the right hand side, then click the Send button. The result set contains the last 5 vital signs compositions and the data points within the compositions.","title":"Run AQL Query"},{"location":"Postman/PM3-using-postman/#close-session","text":"The final step is to close the openEHR session. To do this, navigate to the session folder and select Delete Session . Click on the Send button. The result will show a null sessionId, indicating that there is no open session.","title":"Close Session"},{"location":"openEHR Tools/openEHR0-introduction-and-setup/","text":"openEHR0-introduction-and-setup.html summary: This section provides an introduction to the openEHR toolset and some initial setup instructions. The tools themselves are further explained in the subsequent pages in the openEHR Tools section. --- These instructions will guide you through the process of setting up your computer with a set of openEHR clinical models (archetypes and templates), and a number of tools that will let you create new models or modify existing models. Non-Windows systems Please note that the current Archetype Editor and Template Designer will only work with Windows, but it is not critical that every course participant has access to the tools during the workshop. It is generally beneficial for participants to work in small groups, and there are usually a sufficient number of Windows machines available. For interest, a new set of open-source web-based tools is in early development and can be found at these links. Archetype Designer Template Designer Source Code Please note that these tools are not yet suitable for training use. Install XMIND As clinical modelers we make extensive use of mind map tools and find that the free XMIND tool is one of the best. It works on Windows, Linux and MacOSX. You should download XMIND from XMIND installer . Setup Folder Structure This is the folder structure you are going to create in this step: 1 2 3 4 5 6 7 openehr_training local archetypes templates remote ckm archetypes Create a new folder in a location of your choice called openehr_training e.g. 1 ..\\Documents\\openehr_training Add a new folder named local under openehr_training . e.g. 1 ..\\Documents\\openehr_training\\local This will hold archetypes and templates that we create ourselves. Add a new folder named archetypes under local . e.g. 1 ..\\Documents\\openehr_training\\local\\archetypes Add a new folder named templates under local . e.g. 1 ..\\Documents\\openehr_training\\local\\templates Add a new folder named remote under openehr_training . e.g. 1 ..\\Documents\\openehr_training\\remote_* This will hold archetypes and templates that we download from other places. Add a new folder named ckm under remote . e.g. 1 ..\\Documents\\openehr_training\\remote\\ckm_* Add a new folder named archetypes under ckm . e.g. 1 ..\\Documents\\openehr_training\\remote\\ckm\\archetypes_*","title":"\"Introduction and setup\" permalink:"},{"location":"openEHR Tools/openEHR0-introduction-and-setup/#non-windows-systems","text":"Please note that the current Archetype Editor and Template Designer will only work with Windows, but it is not critical that every course participant has access to the tools during the workshop. It is generally beneficial for participants to work in small groups, and there are usually a sufficient number of Windows machines available. For interest, a new set of open-source web-based tools is in early development and can be found at these links. Archetype Designer Template Designer Source Code Please note that these tools are not yet suitable for training use.","title":"Non-Windows systems"},{"location":"openEHR Tools/openEHR0-introduction-and-setup/#install-xmind","text":"As clinical modelers we make extensive use of mind map tools and find that the free XMIND tool is one of the best. It works on Windows, Linux and MacOSX. You should download XMIND from XMIND installer .","title":"Install XMIND"},{"location":"openEHR Tools/openEHR0-introduction-and-setup/#setup-folder-structure","text":"This is the folder structure you are going to create in this step: 1 2 3 4 5 6 7 openehr_training local archetypes templates remote ckm archetypes Create a new folder in a location of your choice called openehr_training e.g. 1 ..\\Documents\\openehr_training Add a new folder named local under openehr_training . e.g. 1 ..\\Documents\\openehr_training\\local This will hold archetypes and templates that we create ourselves. Add a new folder named archetypes under local . e.g. 1 ..\\Documents\\openehr_training\\local\\archetypes Add a new folder named templates under local . e.g. 1 ..\\Documents\\openehr_training\\local\\templates Add a new folder named remote under openehr_training . e.g. 1 ..\\Documents\\openehr_training\\remote_* This will hold archetypes and templates that we download from other places. Add a new folder named ckm under remote . e.g. 1 ..\\Documents\\openehr_training\\remote\\ckm_* Add a new folder named archetypes under ckm . e.g. 1 ..\\Documents\\openehr_training\\remote\\ckm\\archetypes_*","title":"Setup Folder Structure"},{"location":"openEHR Tools/openEHR1-archetype-editor/","text":"configure the Archetype Editor tool and download the archetypes from the international CKM repository --- Install Archetype Editor The Archetype Editor is the tool we use to create and adapt archetypes. Download the latest version of Archetype Editor. This installs the openEHR Archetype Editor (ArchetypeEditor.exe) in the folder \u2026 Windows-32 C:\\Program Files\\openEHR\\Archetype Editor Windows-64 C:\\Program Files(x86)\\openEHR\\Archetype Editor and should set up links on your Desktop or Start Menu etc. Further details are available at the openEHR Archetype Editor Download page . Setup Archetype Editor Run the Archetype Editor from the Desktop or Start Menu. At the initial screen, open any existing archetype on your system e.g. one of the CKM archetypes previously downloaded 1 ..\\Documents\\openehr_training\\remote\\ckm\\archetypes\\cluster\\OPENEHR-EHR-CLUSTER.device.v1.adl Or one of the sample archetypes provided at 1 ..\\Users\\Public\\Documents\\My Clinical Models\\Sample Set\\Archetypes Set the default Archetype Editor paths Go to Tools\u2192Options\u2192File Locations and set both Archetype Repository path and Archetype XML Repository path to 1 ..\\Documents\\openehr_training Setup User Defaults Go to Tools\u2192Options\u2192User Defaults and enter your details. Name Ian McNicoll Email ian@freshehr.com Organisation freshEHR Clinical Informatics, UK e.g. Download Archetypes The openEHR Foundation Clinical Knowledge Manager (CKM) is a web-based tool that stores openEHR clinical models that are developed collaboratively by the openEHR community and made freely available for others to use and copy. Go to openEHR Foundation CKM then from the top menu select Archetypes\u2192Bulk Export . This will create a zip file with the latest versions of openEHR Foundation CKM archetypes. Download this zip file and unzip it into the remote/ckm folder you created earlier e.g. ..\\Documents\\openehr_training\\models\\remote\\ckm\\archetypes making sure you preserve the folders. You should now have something like 1 2 3 4 5 6 7 8 9 10 11 12 13 openehr_training local archetypes templates remote ckm archetypes cluster composition demographic entry section readme.txt Depending on how your zip program works you may need to move the unzipped folders around to match this pattern. CKM \u2018GitHub mirror\u2019 Git is a common software version control tool. The CKM archetypes and templates are \u2018mirrored\u2019 out to a Git repository hosted at the openEHR Github . If you are familiar with using Git, you can clone the repository as git clone https://github.com/openEHR/CKM-mirror.git .","title":"\"Archetype Editor\" permalink: openEHR1-archetype-editor.html"},{"location":"openEHR Tools/openEHR1-archetype-editor/#install-archetype-editor","text":"The Archetype Editor is the tool we use to create and adapt archetypes. Download the latest version of Archetype Editor. This installs the openEHR Archetype Editor (ArchetypeEditor.exe) in the folder \u2026 Windows-32 C:\\Program Files\\openEHR\\Archetype Editor Windows-64 C:\\Program Files(x86)\\openEHR\\Archetype Editor and should set up links on your Desktop or Start Menu etc. Further details are available at the openEHR Archetype Editor Download page .","title":"Install Archetype Editor"},{"location":"openEHR Tools/openEHR1-archetype-editor/#setup-archetype-editor","text":"Run the Archetype Editor from the Desktop or Start Menu. At the initial screen, open any existing archetype on your system e.g. one of the CKM archetypes previously downloaded 1 ..\\Documents\\openehr_training\\remote\\ckm\\archetypes\\cluster\\OPENEHR-EHR-CLUSTER.device.v1.adl Or one of the sample archetypes provided at 1 ..\\Users\\Public\\Documents\\My Clinical Models\\Sample Set\\Archetypes","title":"Setup Archetype Editor"},{"location":"openEHR Tools/openEHR1-archetype-editor/#set-the-default-archetype-editor-paths","text":"Go to Tools\u2192Options\u2192File Locations and set both Archetype Repository path and Archetype XML Repository path to 1 ..\\Documents\\openehr_training","title":"Set the default Archetype Editor paths"},{"location":"openEHR Tools/openEHR1-archetype-editor/#setup-user-defaults","text":"Go to Tools\u2192Options\u2192User Defaults and enter your details. Name Ian McNicoll Email ian@freshehr.com Organisation freshEHR Clinical Informatics, UK e.g.","title":"Setup User Defaults"},{"location":"openEHR Tools/openEHR1-archetype-editor/#download-archetypes","text":"The openEHR Foundation Clinical Knowledge Manager (CKM) is a web-based tool that stores openEHR clinical models that are developed collaboratively by the openEHR community and made freely available for others to use and copy. Go to openEHR Foundation CKM then from the top menu select Archetypes\u2192Bulk Export . This will create a zip file with the latest versions of openEHR Foundation CKM archetypes. Download this zip file and unzip it into the remote/ckm folder you created earlier e.g. ..\\Documents\\openehr_training\\models\\remote\\ckm\\archetypes making sure you preserve the folders. You should now have something like 1 2 3 4 5 6 7 8 9 10 11 12 13 openehr_training local archetypes templates remote ckm archetypes cluster composition demographic entry section readme.txt Depending on how your zip program works you may need to move the unzipped folders around to match this pattern.","title":"Download Archetypes"},{"location":"openEHR Tools/openEHR1-archetype-editor/#ckm-github-mirror","text":"Git is a common software version control tool. The CKM archetypes and templates are \u2018mirrored\u2019 out to a Git repository hosted at the openEHR Github . If you are familiar with using Git, you can clone the repository as git clone https://github.com/openEHR/CKM-mirror.git .","title":"CKM \u2018GitHub mirror\u2019"},{"location":"openEHR Tools/openEHR2-template-designer/","text":"the Template Designer tool --- Install Template Designer The Ocean Template Designer is a free download available at \u2026 Ocean Template Designer Latest Beta Release Once installed you can run the Template Designer from the Desktop or Start Menu. Further details are available at the openEHR Modelling Tools Page . Setup Template Designer Run the Template Designer from the Desktop or Start Menu. Go to Tools\u2192Knowledge repository\u2192Edit Repository List Add a new Repository e.g. openEHR Training Complete these paths\u2026 Archetype Files ..\\Documents\\Archetypes\\openehr_training\\remote Working Archetype Files ..\\Documents\\openehr_training\\local\\archetypes Template Files ..\\Documents\\openehr_training","title":"\"Template Designer\" permalink: openEHR2-template-designer.html"},{"location":"openEHR Tools/openEHR2-template-designer/#install-template-designer","text":"The Ocean Template Designer is a free download available at \u2026 Ocean Template Designer Latest Beta Release Once installed you can run the Template Designer from the Desktop or Start Menu. Further details are available at the openEHR Modelling Tools Page .","title":"Install Template Designer"},{"location":"openEHR Tools/openEHR2-template-designer/#setup-template-designer","text":"Run the Template Designer from the Desktop or Start Menu. Go to Tools\u2192Knowledge repository\u2192Edit Repository List Add a new Repository e.g. openEHR Training Complete these paths\u2026 Archetype Files ..\\Documents\\Archetypes\\openehr_training\\remote Working Archetype Files ..\\Documents\\openehr_training\\local\\archetypes Template Files ..\\Documents\\openehr_training","title":"Setup Template Designer"},{"location":"openEHR Tools/openEHR3-resources/","text":"section provides links to the various CKM resources and the ADL workbench tool --- CKM Resources openEHR CKM Models maintained by the international openEHR community. NEHTA CKM Models maintained by NEHTA for the Australian national eHealth program. UK CKM Models maintained by a consortium of UK health organisations. HSCIC CKM Models maintained by the UK Health and Socical Care Information Centre. Norwegian CKM Models maintained by the Norwegian national eHealth program. Slovenian CKM Models maintained by the Slovenian national eHealth program. ADL workbench The Archetype Workbench is a technical tool used for experimentation and testing, and it is not usually required by archetype authors. The latest version is available at openEHR ADL Archetype Workbench","title":"\"Resources\" permalink: openEHR3-resources.html summary: This"},{"location":"openEHR Tools/openEHR3-resources/#ckm-resources","text":"openEHR CKM Models maintained by the international openEHR community. NEHTA CKM Models maintained by NEHTA for the Australian national eHealth program. UK CKM Models maintained by a consortium of UK health organisations. HSCIC CKM Models maintained by the UK Health and Socical Care Information Centre. Norwegian CKM Models maintained by the Norwegian national eHealth program. Slovenian CKM Models maintained by the Slovenian national eHealth program.","title":"CKM Resources"},{"location":"openEHR Tools/openEHR3-resources/#adl-workbench","text":"The Archetype Workbench is a technical tool used for experimentation and testing, and it is not usually required by archetype authors. The latest version is available at openEHR ADL Archetype Workbench","title":"ADL workbench"}]}